/*
 * SCIM 2.0 APIs Documentation
 * SCIM 2.0 APIs Documentation
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@wso2.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.32
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";

/**
* Scimv2Groups service.
* @module api/Scimv2GroupsApi
* @version 1.0.0
*/
export class Scimv2GroupsApi {

    /**
    * Constructs a new Scimv2GroupsApi. 
    * @alias module:api/Scimv2GroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createGroup operation.
     * @callback moduleapi/Scimv2GroupsApi~createGroupCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the group which was created
     * Returns HTTP 201 if the group is successfully created.
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {Array.<String>} opts.attributes SCIM defined attributes parameter.
     * @param {Array.<String>} opts.excludedAttributes SCIM defined excludedAttribute parameter.
     * @param {module:api/Scimv2GroupsApi~createGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createGroup(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        'attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),'excludedAttributes': this.apiClient.buildCollectionParam(opts['excludedAttributes'], 'csv')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/scim/v2/Groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteGroup operation.
     * @callback moduleapi/Scimv2GroupsApi~deleteGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the group with the given id
     * Returns HTTP 204 if the group is successfully deleted.
     * @param {String} id Unique id of the resource type.
     * @param {module:api/Scimv2GroupsApi~deleteGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGroup(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/scim/v2/Groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getGroup operation.
     * @callback moduleapi/Scimv2GroupsApi~getGroupCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return groups according to the filter, sort and pagination parameters
     * Returns HTTP 404 if the groups are not found.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes SCIM defined attributes parameter.
     * @param {Array.<String>} opts.excludedAttributes SCIM defined excludedAttribute parameter.
     * @param {String} opts.filter Filter expression for filtering
     * @param {Number} opts.startIndex The 1-based index of the first query result
     * @param {Number} opts.count Specifies the desired maximum number of query results per page.
     * @param {String} opts.sortBy Specifies the attribute whose value SHALL be used to order the returned responses
     * @param {String} opts.sortOder The order in which the \&quot;sortBy\&quot; parameter is applied.
     * @param {module:api/Scimv2GroupsApi~getGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getGroup(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),'excludedAttributes': this.apiClient.buildCollectionParam(opts['excludedAttributes'], 'csv'),'filter': opts['filter'],'startIndex': opts['startIndex'],'count': opts['count'],'sortBy': opts['sortBy'],'sortOder': opts['sortOder']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/scim/v2/Groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getGroupById operation.
     * @callback moduleapi/Scimv2GroupsApi~getGroupByIdCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the group with the given id
     * Returns HTTP 200 if the group is found.
     * @param {String} id Unique id of the resource type.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes SCIM defined attributes parameter.
     * @param {Array.<String>} opts.excludedAttributes SCIM defined excludedAttribute parameter.
     * @param {module:api/Scimv2GroupsApi~getGroupByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getGroupById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),'excludedAttributes': this.apiClient.buildCollectionParam(opts['excludedAttributes'], 'csv')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/scim/v2/Groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getGroupsByPost operation.
     * @callback moduleapi/Scimv2GroupsApi~getGroupsByPostCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return groups according to the filter, sort and pagination parameters
     * Returns HTTP 404 if the groups are not found.
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/Scimv2GroupsApi~getGroupsByPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getGroupsByPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/scim/v2/Groups/.search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateGroup operation.
     * @callback moduleapi/Scimv2GroupsApi~updateGroupCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the updated group
     * Returns HTTP 404 if the group is not found.
     * @param {String} id Unique id of the resource type.
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {Array.<String>} opts.attributes SCIM defined attributes parameter.
     * @param {Array.<String>} opts.excludedAttributes SCIM defined excludedAttribute parameter.
     * @param {module:api/Scimv2GroupsApi~updateGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateGroup(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),'excludedAttributes': this.apiClient.buildCollectionParam(opts['excludedAttributes'], 'csv')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/scim/v2/Groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}