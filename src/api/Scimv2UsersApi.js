/*
 * SCIM 2.0 APIs Documentation
 * SCIM 2.0 APIs Documentation
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@wso2.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.32
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";

/**
* Scimv2Users service.
* @module api/Scimv2UsersApi
* @version 1.0.0
*/
export class Scimv2UsersApi {

    /**
    * Constructs a new Scimv2UsersApi. 
    * @alias module:api/Scimv2UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback moduleapi/Scimv2UsersApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the user which was created
     * Returns HTTP 201 if the user is successfully created.
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {Array.<String>} opts.attributes SCIM defined attributes parameter.
     * @param {Array.<String>} opts.excludedAttributes SCIM defined excludedAttribute parameter.
     * @param {module:api/Scimv2UsersApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createUser(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        'attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),'excludedAttributes': this.apiClient.buildCollectionParam(opts['excludedAttributes'], 'csv')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/scim/v2/Users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback moduleapi/Scimv2UsersApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the user with the given id
     * Returns HTTP 204 if the user is successfully deleted.
     * @param {String} id Unique id of the resource type.
     * @param {module:api/Scimv2UsersApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUser(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/scim/v2/Users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getUser operation.
     * @callback moduleapi/Scimv2UsersApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return users according to the filter, sort and pagination parameters
     * Returns HTTP 404 if the users are not found.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes SCIM defined attributes parameter.
     * @param {Array.<String>} opts.excludedAttributes SCIM defined excludedAttribute parameter.
     * @param {String} opts.filter Filter expression for filtering
     * @param {Number} opts.startIndex The 1-based index of the first query result
     * @param {Number} opts.count Specifies the desired maximum number of query results per page.
     * @param {String} opts.sortBy Specifies the attribute whose value SHALL be used to order the returned responses
     * @param {String} opts.sortOder The order in which the \&quot;sortBy\&quot; parameter is applied.
     * @param {module:api/Scimv2UsersApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),'excludedAttributes': this.apiClient.buildCollectionParam(opts['excludedAttributes'], 'csv'),'filter': opts['filter'],'startIndex': opts['startIndex'],'count': opts['count'],'sortBy': opts['sortBy'],'sortOder': opts['sortOder']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/scim/v2/Users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getUserById operation.
     * @callback moduleapi/Scimv2UsersApi~getUserByIdCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the user with the given id
     * Returns HTTP 200 if the user is found.
     * @param {String} id Unique id of the resource type.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes SCIM defined attributes parameter.
     * @param {Array.<String>} opts.excludedAttributes SCIM defined excludedAttribute parameter.
     * @param {module:api/Scimv2UsersApi~getUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getUserById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),'excludedAttributes': this.apiClient.buildCollectionParam(opts['excludedAttributes'], 'csv')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/scim/v2/Users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getUsersByPost operation.
     * @callback moduleapi/Scimv2UsersApi~getUsersByPostCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return users according to the filter, sort and pagination parameters
     * Returns HTTP 404 if the users are not found.
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/Scimv2UsersApi~getUsersByPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getUsersByPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/scim/v2/Users/.search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback moduleapi/Scimv2UsersApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the updated user
     * Returns HTTP 404 if the user is not found.
     * @param {String} id Unique id of the resource type.
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {Array.<String>} opts.attributes SCIM defined attributes parameter.
     * @param {Array.<String>} opts.excludedAttributes SCIM defined excludedAttribute parameter.
     * @param {module:api/Scimv2UsersApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateUser(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),'excludedAttributes': this.apiClient.buildCollectionParam(opts['excludedAttributes'], 'csv')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/scim/v2/Users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}